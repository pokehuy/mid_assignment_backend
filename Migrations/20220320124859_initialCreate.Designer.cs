// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mid_assignment_backend.Repositories;

#nullable disable

namespace mid_assignment_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220320124859_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("mid_assignment_backend.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Author1",
                            CategoryId = 1,
                            Title = "Book1"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Author2",
                            CategoryId = 2,
                            Title = "Book2"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Author3",
                            CategoryId = 3,
                            Title = "Book3"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Author3",
                            CategoryId = 3,
                            Title = "Book4"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Author1",
                            CategoryId = 3,
                            Title = "Book5"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Author6",
                            CategoryId = 3,
                            Title = "Book6"
                        });
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.BookBorrowingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("RequestByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RequestByUserId");

                    b.ToTable("BookBorrowingRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 20, 19, 48, 59, 502, DateTimeKind.Local).AddTicks(9760),
                            ProcessedByUserId = 1,
                            RequestByUserId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.BookBorrowingRequestDetails", b =>
                {
                    b.Property<int>("BookBorrowingRequestId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BookBorrowingRequestId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookBorrowingRequestDetails", (string)null);

                    b.HasData(
                        new
                        {
                            BookBorrowingRequestId = 1,
                            BookId = 1
                        },
                        new
                        {
                            BookBorrowingRequestId = 1,
                            BookId = 2
                        },
                        new
                        {
                            BookBorrowingRequestId = 1,
                            BookId = 3
                        });
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Category1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Category2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Category3"
                        });
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "admin",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Password = "1",
                            Role = "User",
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            Password = "2",
                            Role = "User",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.Book", b =>
                {
                    b.HasOne("mid_assignment_backend.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.BookBorrowingRequest", b =>
                {
                    b.HasOne("mid_assignment_backend.Entities.User", "ProcessedByUser")
                        .WithMany("ProcessedRequests")
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("mid_assignment_backend.Entities.User", "RequestByUser")
                        .WithMany("BookBorrowingRequests")
                        .HasForeignKey("RequestByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedByUser");

                    b.Navigation("RequestByUser");
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.BookBorrowingRequestDetails", b =>
                {
                    b.HasOne("mid_assignment_backend.Entities.BookBorrowingRequest", "BookBorrowingRequest")
                        .WithMany("Details")
                        .HasForeignKey("BookBorrowingRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mid_assignment_backend.Entities.Book", "Book")
                        .WithMany("Details")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookBorrowingRequest");
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.Book", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.BookBorrowingRequest", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("mid_assignment_backend.Entities.User", b =>
                {
                    b.Navigation("BookBorrowingRequests");

                    b.Navigation("ProcessedRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
